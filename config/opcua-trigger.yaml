input:
  opcuatrigger:
    endpoint: "opc.tcp://localhost:46010"
    #nodeIDs: ["ns=2;s=Humidity", "ns=2;s=Air Quality"]
    tNodeIDs:
      - '{"1": [{"node": "ns=2;s=Pressure", "group": "D001", "db": "mssql", "historian": "influx", "sqlSp": "sp_sql_logging"}]}'
      - '{"2": [{"node": "ns=2;s=Temperature", "group": "D002", "db": "mssql", "historian": "influx", "sqlSp": "sp_sql_logging"}]}'
    subscribeEnabled: true
    insecure: true
    tBatchNodeIDs:
      - '{"1": [{"node":"ns=2;s=Pressure", "name": "PressureNodeName"}, {"node": "ns=2;s=Humidity", "name": "HumidityNodeName"}]}'
      - '{"2": [{"node":"ns=2;s=Temperature","name": "TemperatureNodeName"}, {"node": "ns=2;s=Air Quality", "name": "Air Qualit Node Name"}]}'



pipeline:
  processors:
    - bloblang: |
        root = meta("Message").parse_json()
        root.value = this
        root.timestamp_ms = (timestamp_unix_nano() / 1000000).floor()
        root.trigger = meta("opcua_path")
        root.group = meta("group")
        root.db = meta("db")
        root.historian = meta("historian")
        root.sqlSp = meta("sqlSp")
        root.func = jsontosp(meta("Message"))

        let one = "%s%s='%s'".format("@", "group", meta("group"))
        let two = "%s%s='%s'".format("@", "trigger", meta("opcua_path"))
        let four = "%s%s=%s".format("@", "value", this)
        let gmeta = "%s, %s, %s".format($one,$two,$four)
        meta spq = "exec " + meta("sqlSp")+ " " + jsontosp(meta("Message")) +  $gmeta
        let g = "exec " + meta("sqlSp")+ " " + jsontosp(meta("Message")) +  $gmeta
        root.query = $g

output:
  broker:
    pattern: fan_out
    outputs:
      - mqtt:
          urls:
            - 'localhost:1883'
          topic: 'ia/raw/opcuatrigger/${! meta("opcua_path") }'
          client_id: benthos-umh
      #- sql_raw:
      #    driver: "mssql" # No default (required)
      #    dsn: "sqlserver://SA:Password99@localhost:1433?database=benthos"
      #    query: ${!meta("spq")}
      #    unsafe_dynamic_query: true
