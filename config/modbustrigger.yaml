input:
  modbustrigger:
    endpoint: "localhost:10502"
    slaveid: 1
    timeout: 10
    subscriptions: 
      - '{"2": [{"address": "1", "addresstype":"coils","name":"Temprature", "group": "D001", "db": "mssql", "historian": "influx", "sqlSp": "sp_sql_logging"}]}'
      - '{"3": [{"address": "1", "addresstype":"holding","name":"Holding", "group": "D001", "db": "mssql", "historian": "influx", "sqlSp": "sp_sql_logging"}]}'
    tsubscriptions:
      - '{"1": [{"address":"1","addresstype":"holding", "name": "PressureNodeName"}, {"address": "3", "addresstype":"coils","name": "HumidityNodeName"}]}'
      - '{"2": [{"address":"4","addresstype":"discrete","name": "TemperatureNodeName"}, {"address": "5", "addresstype":"holding","name": "Air Qualit Node Name"}]}'
    subscribeEnabled: true
    # unitID: 1  # Specify the Modbus unit ID
    # functionCode: 3  # Specify the Modbus function code
    # startingAddress: 0  # Specify the starting address for Modbus requests
    # quantity: 10  # Specify the quantity of values to read
    # interval: "1s"  # Specify the interval for polling the Modbus server
    # encoding: "binary"  # Specify the encoding for reading values (binary or ascii)
pipeline:
  processors:
    - bloblang: |
        root = meta("Message").parse_json()
        root.value = meta("value").number()
        root.timestamp_ms = (timestamp_unix_nano() / 1000000).floor()
        root.group = meta("group")
        root.db = meta("db")
        root.historian = meta("historian")
        root.sqlSp = meta("sqlSp")
        root.trigger = meta("name")
output:
  mqtt:
    urls:
      - 'localhost:1883'
    topic: 'ia/raw/modbus/${! meta("name") }'
    client_id: benthos-umh
